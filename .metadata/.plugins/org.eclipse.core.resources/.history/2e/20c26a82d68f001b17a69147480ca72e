package com.kurly.member;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import com.kurly.db.Dbconn;

public class MemberDAO {
	
	Connection conn = null;
	PreparedStatement pstmt = null;
	ResultSet rs = null;
	List<MemberDTO> memberList = new ArrayList<>();
	String sql = "";
	
	// 회원가입
	public int join(MemberDTO member) {
		try {
			sql = "insert into tb_member(m_userid, m_password, m_name, m_tel, m_email, m_birth, m_gender, m_zipcode, m_address1, m_address2, m_recomid, m_membership, m_kurlypass, m_state, m_withdrawwhy, m_withdrawwhy2, m_withdrawdate) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
			
			conn = Dbconn.getConnection(); // DB연결
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, member.getmUserid());
			pstmt.setString(2, member.getmPassword());
			pstmt.setString(3, member.getmName());
			pstmt.setString(4, member.getmTel());
			pstmt.setString(5, member.getmEmail());
			pstmt.setString(6, member.getmBirth());
			pstmt.setString(7, member.getmGender());
			pstmt.setString(8, member.getmZipcode());
			pstmt.setString(9, member.getmAddress1());
			pstmt.setString(10, member.getmAddress2());
			pstmt.setString(12, member.getmRecomid());
			pstmt.setString(13, member.getmRegdate());
			pstmt.setString(14, member.getmMembership());
			pstmt.setString(15, member.getmKurlypass());
			pstmt.setString(16, member.getmKurlypass());
			pstmt.setInt(16, member.getmState());
			pstmt.setString(16, member.getmWithdrawwhy());
			pstmt.setString(16, member.getmWithdrawwhy2());
			pstmt.setString(16, member.getmWithdrawdate());

			if (pstmt.executeUpdate() != 0) {
				return 1;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return 0;
	}
	
	// 로그인
	public MemberDTO login(MemberDTO member) {
		sql = "SELECT m_idx, m_userid, m_name FROM tb_member WHERE m_userid=? AND m_password=?";
		try {
			conn = Dbconn.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, member.getmUserid());
			pstmt.setString(2, member.getmPassword());
			rs = pstmt.executeQuery();
			
			if(rs.next()) {
				member.setmIdx(rs.getInt("m_idx"));
				member.setmUserid(rs.getString("m_userid"));
				member.setmName(rs.getString("m_name"));
				return member;
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	// 정보수정
	public MemberDTO info(MemberDTO member) {
		HashMap<String, String> dataMap = new HashMap<>();
		dataMap.put("mem_userid", member.getUserid());
		dataMap = sqlsession.selectOne("Member.info", dataMap);
		
		if(dataMap != null) {
			member.setIdx(Integer.parseInt(String.valueOf(dataMap.get("mem_idx"))));
			member.setUserid(dataMap.get("mem_userid"));
			member.setUsername(dataMap.get("mem_name"));
			member.setHp(dataMap.get("mem_hp"));
			member.setEmail(dataMap.get("mem_email"));
			String hobby[] = dataMap.get("mem_hobby").split(" ");
			member.setHobby(hobby);
			member.setSsn1(dataMap.get("mem_ssn1"));
			member.setSsn2(dataMap.get("mem_ssn2"));
			member.setZipcode(dataMap.get("mem_zipcode"));
			member.setAddress1(dataMap.get("mem_address1"));
			member.setAddress2(dataMap.get("mem_address2"));
			member.setAddress3(dataMap.get("mem_address3"));
			return member;
		}
		return null;
	}

	// 아이디 체크
	public boolean idCheck(MemberDTO member) {
		HashMap<String, String> dataMap = new HashMap<>();
		dataMap.put("m_idx", String.valueOf(member.getmIdx()));
		dataMap.put("m_userid", member.getmPassword());

		if((Integer)sqlsession.selectOne("Member.IdCheck", dataMap) == 1) {
			return true;
		}
		return false;
	}
	
	// pw 체크
	public boolean pwCheck(MemberDTO member) {
		HashMap<String, String> dataMap = new HashMap<>();
		dataMap.put("mem_idx", String.valueOf(member.getIdx()));
		dataMap.put("mem_userpw", member.getUserpw());
		
		if((Integer)sqlsession.selectOne("Member.pwCheck", dataMap) == 1) {
			return true;
		}
		return false;
	}
	   
	   
	// 이메일 체크
	public boolean emailCheck(MemberDTO member) {
		HashMap<String, String> dataMap = new HashMap<>();
		dataMap.put("m_idx", String.valueOf(member.getmIdx()));
		dataMap.put("m_password", member.getmPassword());

		if((Integer)sqlsession.selectOne("Member.pwCheck", dataMap) == 1) {
			return true;
		}
		return false;
	}
	
	// 정보 수정
	public int edit(MemberDTO member) {
		HashMap<String, String> dataMap = new HashMap<>();
//		String mGendertr = "";  // 성별체크
//		for(String mGender : member.getmGender()) {
//		mGendertr = mGendertr + mGender + " ";
//		}
		
		dataMap.put("m_idx", String.valueOf(member.getmIdx()));
		dataMap.put("m_name", member.getmName());
		dataMap.put("m_tel", member.getmTel());
		dataMap.put("m_email", member.getmEmail());
// 		dataMap.put("m_gender", mGendertr); // 성별

//		dataMap.put("mem_ssn1", member.getSsn1());
//		dataMap.put("mem_ssn2", member.getSsn2());

		dataMap.put("m_zipcode", member.getmZipcode());
		dataMap.put("m_address1", member.getmAddress1());
		dataMap.put("m_address2", member.getmAddress2());
		
		return sqlsession.update("Member.edit", dataMap);
		}
	}
